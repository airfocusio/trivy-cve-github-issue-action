import { createHash } from 'crypto'
import * as fs from 'fs'
import { promisify } from 'util'
import { glob } from 'glob'
import * as childProcess from 'child_process'

export const readFileAsync = promisify(fs.readFile)
export const execFileAsync = promisify(childProcess.execFile)
export const globAsync = promisify(glob)

export interface Task {
  label: string
  done: boolean
}

export function extractTasksFromIssueBody(body: string): Task[] {
  const lines = body.match(/^- \[([x ])\] (.*)$/gm) || []
  return lines.flatMap(line => {
    const match = line.match(/^- \[([x ])\](.*)$/)
    return {
      label: match![2].trim(),
      done: !!match![1].trim(),
    }
  })
}

export function closeAllTasksInIssueBody(body: string): string {
  return body.replace(/^- \[ \] /gm, '- [x] ')
}

export async function sequential<T>(promiseFns: (() => Promise<T>)[]): Promise<T[]> {
  return await promiseFns.reduce<Promise<T[]>>(async (accP, promiseFn) => {
    const acc = await accP
    const result = await promiseFn()
    return [...acc, result]
  }, Promise.resolve([]))
}

export function flatten<T>(arrayOfArrays: T[][]): T[] {
  return arrayOfArrays.flatMap(arrays => arrays)
}

export function sha1(str: string): string {
  var shasum = createHash('sha1')
  shasum.update(str)
  return shasum.digest('hex').substring(0, 12)
}

export function shallowCloneObject(obj: any, keysToExclude: string[] = []): any {
  return Object.keys(obj)
    .filter(key => keysToExclude.indexOf(key) < 0)
    .reduce((acc, key) => ({ ...acc, [key]: obj[key] }), {})
}
