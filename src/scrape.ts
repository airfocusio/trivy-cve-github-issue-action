import * as yaml from 'js-yaml'
import { flatten, sequential, globAsync, readFileAsync } from './utils'

export interface ScrapeContainerImagesResult {
  file: string
  containerImages: string[]
}

export async function scrapeFilesForContainerImages(filesGlobs: string[]): Promise<ScrapeContainerImagesResult[]> {
  const files = await sequential(filesGlobs.map(fg => () => globAsync(fg))).then(flatten)
  return await sequential<ScrapeContainerImagesResult>(
    files.map(file => async () => {
      const content = await readFileAsync(file, 'utf8')
      const documents = yaml.loadAll(content)
      const containerImages = documents.flatMap(contentYaml => {
        function traverse(elem: any): string[] {
          if (elem === undefined) {
            return []
          } else if (elem === null) {
            return []
          } else if (typeof elem === 'string') {
            return []
          } else if (typeof elem === 'number') {
            return []
          } else if (typeof elem === 'boolean') {
            return []
          } else if (Array.isArray(elem)) {
            return elem.flatMap(traverse)
          } else if (typeof elem === 'object') {
            return Object.keys(elem).flatMap(key => {
              if (key === 'image' && typeof elem[key] === 'string') {
                return [elem[key]]
              } else {
                return traverse(elem[key])
              }
            })
          } else {
            return []
          }
        }
        return traverse(contentYaml)
      })
      return { file, containerImages } as ScrapeContainerImagesResult
    })
  )
}
