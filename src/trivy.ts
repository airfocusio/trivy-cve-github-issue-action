import { execFileAsync } from './utils'

export type TrivySeverity = 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW' | 'UNKNOWN'
export interface TrivyResult {
  artifactName: string
  vulnerabilityID: string
  packageName: string
  severity: TrivySeverity
  installedVersion: string
  fixedVersion?: string
  title: string
  description: string
  cvssNvdV3Vector?: string
  cvssNvdV3Score?: number
  references: string[]
}

export async function execTrivy(...args: string[]): Promise<string> {
  const { stdout } = await execFileAsync('trivy', args)
  return stdout
}

export async function execTrivyUpdateDatabase(): Promise<void> {
  await execTrivy('image', '--download-db-only')
}

export async function execTrivyImageScan(image: string, severities: TrivySeverity[]): Promise<TrivyResult[]> {
  const rawStr = await execTrivy(
    'image',
    image,
    '--skip-db-update',
    '--security-checks',
    'vuln',
    '--severity',
    severities.join(','),
    '--format',
    'json'
  )
  const raw = JSON.parse(rawStr) as {
    ArtifactName?: string
    Results?: {
      Vulnerabilities?: {
        VulnerabilityID: string
        PkgName?: string
        Severity?: TrivySeverity
        InstalledVersion?: string
        FixedVersion?: string
        Title?: string
        Description?: string
        CVSS?: {
          nvd?: {
            V3Vector?: string
            V3Score?: number
          }
        }
        PrimaryURL?: string
        References?: string[]
      }[]
    }[]
  }

  return (raw?.Results || []).flatMap(result => {
    return (result?.Vulnerabilities || []).map(vulnerability => {
      return {
        artifactName: raw.ArtifactName || 'unknown:unknown',
        vulnerabilityID: vulnerability.VulnerabilityID,
        packageName: vulnerability.PkgName || 'unknown',
        severity: (vulnerability.Severity || 'UNKNOWN') as TrivySeverity,
        installedVersion: vulnerability.InstalledVersion || 'unknown',
        fixedVersion: vulnerability.FixedVersion || undefined,
        title: vulnerability.Title || 'No title',
        description: vulnerability.Description || '',
        cvssNvdV3Vector: vulnerability.CVSS?.nvd?.V3Vector || undefined,
        cvssNvdV3Score: vulnerability.CVSS?.nvd?.V3Score || undefined,
        references: [vulnerability.PrimaryURL, ...(vulnerability.References || [])]
          .map(r => (r || '').trim())
          .filter(r => !!r),
      } as TrivyResult
    })
  })
}
