import { execFileAsync, shallowCloneObject, sha1 } from './utils'

export type TrivySeverity = 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW' | 'UNKNOWN'
export interface TrivyResult {
  ID: string
  HashID: string
  Artifact: {
    ArtifactName: string
  }
  Vulnerability: {
    VulnerabilityID: string
    PkgName: string
    Severity: TrivySeverity
    InstalledVersion: string
    FixedVersion?: string
    Title: string
    Description: string
    CVSS?: {
      nvd?: {
        V3Vector?: string
        V3Score?: number
      }
    }
    PrimaryURL: string
    References: string[]
  }
  Class: {}
}

export async function execTrivy(...args: string[]): Promise<string> {
  const { stdout } = await execFileAsync('trivy', args)
  return stdout
}

export async function execTrivyUpdateDatabase(): Promise<void> {
  console.error('Updating trivy database ...')
  await execTrivy('image', '--download-db-only')
}

export async function execTrivyImageScan(image: string, severities: TrivySeverity[] | string): Promise<TrivyResult[]> {
  console.error(`Scanning image ${image} ...`)
  const severity = typeof severities === 'string' ? severities : severities.join(',')
  const rawStr = await execTrivy(
    'image',
    image,
    '--security-checks',
    'vuln',
    '--severity',
    severity,
    '--format',
    'json'
  )
  const raw = JSON.parse(rawStr)

  const results: TrivyResult[] = (raw?.Results || []).flatMap(result => {
    return (result?.Vulnerabilities || []).map(vulnerability => {
      return calculateTrivyResultIdentifier({
        Artifact: shallowCloneObject(raw, ['SchemaVersion', 'Results']),
        Class: shallowCloneObject(result, ['Vulnerabilities']),
        Vulnerability: shallowCloneObject(vulnerability),
      })
    })
  })
  return results
}

function calculateTrivyResultIdentifier(result: Omit<TrivyResult, 'ID' | 'HashID'>): TrivyResult {
  const id = [result.Vulnerability.VulnerabilityID].join('/')
  return {
    ID: id,
    HashID: sha1(id),
    ...result,
  }
}
