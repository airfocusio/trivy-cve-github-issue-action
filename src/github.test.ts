import { renderGithubIssueBody, parseGithubIssueBody } from './github'

it('renderGithubIssueBody', () => {
  expect(renderGithubIssueBody([])).toEqual('')
  expect(renderGithubIssueBody([{ type: 'text', text: '' }])).toEqual('')
  expect(renderGithubIssueBody([{ type: 'text', text: 'l1' }])).toEqual('l1')
  expect(
    renderGithubIssueBody([
      { type: 'text', text: 'l1' },
      { type: 'text', text: 'l2' },
    ])
  ).toEqual('l1\nl2')
  expect(
    renderGithubIssueBody([
      { type: 'text', text: 'l1' },
      { type: 'text', text: 'l2' },
      { type: 'task', label: 't1', done: false, params: {} },
    ])
  ).toEqual('l1\nl2\n- [ ] t1')
  expect(
    renderGithubIssueBody([
      { type: 'text', text: 'l1' },
      { type: 'text', text: 'l2' },
      { type: 'task', label: 't1', done: false, params: {} },
      { type: 'task', label: 't2', done: true, params: {} },
    ])
  ).toEqual('l1\nl2\n- [ ] t1\n- [x] t2')
  expect(
    renderGithubIssueBody([
      { type: 'text', text: 'l1' },
      { type: 'text', text: 'l2' },
      { type: 'task', label: 't1', done: false, params: {} },
      { type: 'task', label: 't2', done: true, params: { k1: 'v1' } },
    ])
  ).toEqual('l1\nl2\n- [ ] t1\n- [x] t2 <!-- k1=v1 -->')
  expect(
    renderGithubIssueBody([
      { type: 'text', text: 'l1' },
      { type: 'text', text: 'l2' },
      { type: 'task', label: 't1', done: false, params: {} },
      { type: 'task', label: 't2', done: true, params: { k1: 'v1', k2: 'v2' } },
    ])
  ).toEqual('l1\nl2\n- [ ] t1\n- [x] t2 <!-- k1=v1 --> <!-- k2=v2 -->')
})

it('parseGithubIssueBody', () => {
  expect(parseGithubIssueBody('')).toEqual([{ type: 'text', text: '' }])
  expect(parseGithubIssueBody('l1')).toEqual([{ type: 'text', text: 'l1' }])
  expect(parseGithubIssueBody('l1\nl2')).toEqual([
    { type: 'text', text: 'l1' },
    { type: 'text', text: 'l2' },
  ])
  expect(parseGithubIssueBody('l1\nl2\n- [ ] t1')).toEqual([
    { type: 'text', text: 'l1' },
    { type: 'text', text: 'l2' },
    { type: 'task', label: 't1', done: false, params: {} },
  ])
  expect(parseGithubIssueBody('l1\nl2\n- [ ] t1\n- [x] t2')).toEqual([
    { type: 'text', text: 'l1' },
    { type: 'text', text: 'l2' },
    { type: 'task', label: 't1', done: false, params: {} },
    { type: 'task', label: 't2', done: true, params: {} },
  ])
  expect(parseGithubIssueBody('l1\nl2\n- [ ] t1\n- [x] t2 <!-- k1=v1 -->')).toEqual([
    { type: 'text', text: 'l1' },
    { type: 'text', text: 'l2' },
    { type: 'task', label: 't1', done: false, params: {} },
    { type: 'task', label: 't2', done: true, params: { k1: 'v1' } },
  ])
  expect(parseGithubIssueBody('l1\nl2\n- [ ] t1\n- [x] t2 <!-- k1=v1 --> <!-- k2=v2 -->')).toEqual([
    { type: 'text', text: 'l1' },
    { type: 'text', text: 'l2' },
    { type: 'task', label: 't1', done: false, params: {} },
    { type: 'task', label: 't2', done: true, params: { k1: 'v1', k2: 'v2' } },
  ])
})
