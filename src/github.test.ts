import { renderGithubIssueBody, parseGithubIssueBody, compareGithubIssues, renderGithubIssueDiff } from './github'
import * as jsonDiff from 'json-diff'

it('renderGithubIssueBody', () => {
  expect(renderGithubIssueBody([])).toEqual('')
  expect(renderGithubIssueBody([{ type: 'text', text: '' }])).toEqual('')
  expect(renderGithubIssueBody([{ type: 'text', text: 'l1' }])).toEqual('l1')
  expect(
    renderGithubIssueBody([
      { type: 'text', text: 'l1' },
      { type: 'text', text: 'l2' },
    ])
  ).toEqual('l1\nl2')
  expect(
    renderGithubIssueBody([
      { type: 'text', text: 'l1' },
      { type: 'text', text: 'l2' },
      { type: 'task', label: 't1', done: false, params: {} },
    ])
  ).toEqual('l1\nl2\n- [ ] t1')
  expect(
    renderGithubIssueBody([
      { type: 'text', text: 'l1' },
      { type: 'text', text: 'l2' },
      { type: 'task', label: 't1', done: false, params: {} },
      { type: 'task', label: 't2', done: true, params: {} },
    ])
  ).toEqual('l1\nl2\n- [ ] t1\n- [x] t2')
  expect(
    renderGithubIssueBody([
      { type: 'text', text: 'l1' },
      { type: 'text', text: 'l2' },
      { type: 'task', label: 't1', done: false, params: {} },
      { type: 'task', label: 't2', done: true, params: { k1: 'v1' } },
    ])
  ).toEqual('l1\nl2\n- [ ] t1\n- [x] t2 <!-- k1=v1 -->')
  expect(
    renderGithubIssueBody([
      { type: 'text', text: 'l1' },
      { type: 'text', text: 'l2' },
      { type: 'task', label: 't1', done: false, params: {} },
      { type: 'task', label: 't2', done: true, params: { k1: 'v1', k2: 'v2' } },
    ])
  ).toEqual('l1\nl2\n- [ ] t1\n- [x] t2 <!-- k1=v1 --> <!-- k2=v2 -->')
  expect(
    renderGithubIssueBody([
      { type: 'text', text: 'l1' },
      { type: 'text', text: 'l2' },
      { type: 'task', label: 't1', done: false, params: {} },
      { type: 'task', label: 't2', done: true, params: { k2: 'v2', k1: 'v1' } },
    ])
  ).toEqual('l1\nl2\n- [ ] t1\n- [x] t2 <!-- k1=v1 --> <!-- k2=v2 -->')
})

it('parseGithubIssueBody', () => {
  expect(parseGithubIssueBody('')).toEqual([{ type: 'text', text: '' }])
  expect(parseGithubIssueBody('l1')).toEqual([{ type: 'text', text: 'l1' }])
  expect(parseGithubIssueBody('l1\nl2')).toEqual([
    { type: 'text', text: 'l1' },
    { type: 'text', text: 'l2' },
  ])
  expect(parseGithubIssueBody('l1\nl2\n- [ ] t1')).toEqual([
    { type: 'text', text: 'l1' },
    { type: 'text', text: 'l2' },
    { type: 'task', label: 't1', done: false, params: {} },
  ])
  expect(parseGithubIssueBody('l1\nl2\n- [ ] t1\n- [x] t2')).toEqual([
    { type: 'text', text: 'l1' },
    { type: 'text', text: 'l2' },
    { type: 'task', label: 't1', done: false, params: {} },
    { type: 'task', label: 't2', done: true, params: {} },
  ])
  expect(parseGithubIssueBody('l1\nl2\n- [ ] t1\n- [x] t2 <!-- k1=v1 -->')).toEqual([
    { type: 'text', text: 'l1' },
    { type: 'text', text: 'l2' },
    { type: 'task', label: 't1', done: false, params: {} },
    { type: 'task', label: 't2', done: true, params: { k1: 'v1' } },
  ])
  expect(parseGithubIssueBody('l1\nl2\n- [ ] t1\n- [x] t2 <!-- k1=v1 --> <!-- k2=v2 -->')).toEqual([
    { type: 'text', text: 'l1' },
    { type: 'text', text: 'l2' },
    { type: 'task', label: 't1', done: false, params: {} },
    { type: 'task', label: 't2', done: true, params: { k1: 'v1', k2: 'v2' } },
  ])
})

it('compareGithubIssues', () => {
  expect(compareGithubIssues({}, {})).toBe(true)

  expect(compareGithubIssues({ title: 'a' }, { title: 'a' })).toBe(true)
  expect(compareGithubIssues({ title: 'a' }, { title: '' })).toBe(false)
  expect(compareGithubIssues({ title: '' }, { title: 'a' })).toBe(false)
  expect(compareGithubIssues({ title: 0 }, { title: '0' })).toBe(true)

  expect(compareGithubIssues({ body: 'a\nb\n' }, { body: 'a\nb\n' })).toBe(true)
  expect(compareGithubIssues({ body: 'a\nb\n' }, { body: '' })).toBe(false)
  expect(compareGithubIssues({ body: '' }, { body: 'a' })).toBe(false)

  expect(compareGithubIssues({ labels: [] }, {})).toBe(true)
  expect(compareGithubIssues({}, { labels: [] })).toBe(true)
  expect(compareGithubIssues({ labels: ['a', 'b'] }, { labels: ['b', 'a'] })).toBe(true)
  expect(compareGithubIssues({ labels: [{ name: 'a' }, 'b'] }, { labels: [{ name: 'b' }, 'a'] })).toBe(true)
  expect(compareGithubIssues({ labels: ['a'] }, { labels: ['b'] })).toBe(false)
  expect(compareGithubIssues({ labels: ['a', 'b'] }, { labels: ['a'] })).toBe(false)
  expect(compareGithubIssues({ labels: ['a'] }, { labels: ['a', 'b'] })).toBe(false)

  expect(compareGithubIssues({ state: 'open' }, {})).toBe(true)
  expect(compareGithubIssues({}, { state: 'open' })).toBe(true)
  expect(compareGithubIssues({ state: 'open' }, { state: 'closed' })).toBe(false)
  expect(compareGithubIssues({ state: 'closed' }, { state: 'open' })).toBe(false)
})

it('renderGithubIssueDiff', () => {
  expect(renderGithubIssueDiff({}, {})).toBe('')
  expect(renderGithubIssueDiff({ title: 'a' }, { title: 'b' }, false)).toBe(` {
-  title: \"a\"
+  title: \"b\"
 }
`)
  expect(
    renderGithubIssueDiff(
      { body: 'header\nheader\nheader\nheader\n1\nhello\nworld\n1\nfooter' },
      { body: 'header\nheader\nheader\nheader\n2\nhello\nworld\n2\nfooter' },
      false
    )
  ).toBe(` {
   body: [
     ... (4)
-    "1"
+    "2"
     ... (2)
-    "1"
+    "2"
     ...
   ]
 }
`)
  expect(renderGithubIssueDiff({ labels: [{ name: 'a' }, 'b'] }, { labels: ['b', 'a', 'c'] }, false)).toBe(` {
   labels: [
     ... (2)
+    "c"
   ]
 }
`)
})
